import os
from aiogram import Router, F
from aiogram.types import Message, FSInputFile, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from states import Form
from database.models import save_user, preload_profiles, get_next_profile, record_like, check_mutual_like
from handlers.profile import send_next_profile

router = Router()
os.makedirs("media/users", exist_ok=True)

# --- –ú–µ–Ω—é ReplyKeyboard –¥–ª—è –ø—Ä–æ—Ñ—ñ–ª—é ---
profile_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ù§Ô∏è –õ–∞–π–∫"), KeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏")],
        [KeyboardButton(text="‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É")],
        [KeyboardButton(text="–í–∑—è—Ç–∏ –∑ –º–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é —Ç–µ–ª–µ–≥—Ä–∞–º")],
        [KeyboardButton(text="‚úÖ –¶–µ –≤—Å–µ, –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–æ—Ç–æ")]
    ],
    resize_keyboard=True
)

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ ---
@router.message(Form.photos, F.content_type.in_({'photo', 'video'}))
async def handle_media(message: Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    media_paths = data.get("photos", [])

    if len(media_paths) >= 3:
        await message.answer("üìõ –ú–∞–∫—Å–∏–º—É–º 3 —Ñ–æ—Ç–æ. –ù–∞—Ç–∏—Å–Ω–∏ ¬´‚úÖ –¶–µ –≤—Å–µ, –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–æ—Ç–æ¬ª.", reply_markup=profile_menu)
        return

    file = message.photo[-1] if message.photo else message.video
    file_info = await message.bot.get_file(file.file_id)
    file_ext = ".jpg" if message.photo else ".mp4"
    user_dir = f"media/users/{user_id}"
    os.makedirs(user_dir, exist_ok=True)
    file_index = len(media_paths) + 1
    filename = f"photo{file_index}{file_ext}"
    file_path = os.path.join(user_dir, filename)
    await message.bot.download_file(file_info.file_path, file_path)

    media_paths.append(file_path)
    await state.update_data(photos=media_paths)
    await message.answer(f"‚úÖ –î–æ–¥–∞–Ω–æ {len(media_paths)} –∑ 3. –ú–æ–∂–µ—à —â–µ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É.", reply_markup=profile_menu)


# --- –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –ø—Ä–æ—Ñ—ñ–ª—é ---
async def show_profile_preview(message: Message, state: FSMContext):
    data = await state.get_data()
    name = data.get("name") or (message.from_user.first_name if hasattr(message.from_user, "first_name") else "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á")
    age = data.get("age")
    city = data.get("city")
    photos = data.get("photos", [])
    caption = f"*{name}*, {age}, {city}"

    if photos and os.path.exists(photos[0]):
        photo_input = FSInputFile(photos[0])
        await message.answer_photo(photo=photo_input, caption=caption, parse_mode="Markdown", reply_markup=profile_menu)
    else:
        await message.answer(caption, parse_mode="Markdown", reply_markup=profile_menu)


# --- –õ–∞–π–∫ –ø—Ä–æ—Ñ—ñ–ª—é ---
@router.message(lambda m: m.text == "‚ù§Ô∏è –õ–∞–π–∫")
async def like_profile(message: Message, state: FSMContext):
    data = await state.get_data()
    liked_user_id = data.get("current_profile_id")
    if not liked_user_id:
        await message.answer("–°–ø–æ—á–∞—Ç–∫—É –≤—ñ–¥–∫—Ä–∏–π –∞–Ω–∫–µ—Ç—É üòâ", reply_markup=profile_menu)
        return

    record_like(message.from_user.id, liked_user_id)

    # –û—Ç—Ä–∏–º—É—î–º–æ —é–∑–µ—Ä–∞ –∑ –ë–î
    from database.models import get_user
    liked_user = get_user(liked_user_id)

    if liked_user:
        username = liked_user.get("username")
        name = liked_user.get("name", "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á")

        if username:
            link = f"[{name} (@{username})](https://t.me/{username})"
        else:
            link = f"[{name}](tg://user?id={liked_user_id})"
    else:
        link = f"[–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º](tg://user?id={liked_user_id})"

    if check_mutual_like(message.from_user.id, liked_user_id):
        await message.answer(
            f"üéâ –£ —Ç–µ–±–µ –≤–∑–∞—î–º–Ω–∏–π –ª–∞–π–∫ –∑ {link}!",
            reply_markup=profile_menu,
            parse_mode="Markdown"
        )
    else:
        await message.answer("–õ–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ ‚úÖ", reply_markup=profile_menu)

    next_profile_id = await send_next_profile(message, message.from_user.id)
    if next_profile_id:
        await state.update_data(current_profile_id=next_profile_id)

# --- –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å ---
@router.message(lambda m: m.text == "‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏")
async def skip_profile(message: Message, state: FSMContext):
    next_profile_id = await send_next_profile(message, message.from_user.id)
    if next_profile_id:
        await state.update_data(current_profile_id=next_profile_id)


# --- –ü–µ—Ä–µ–≥–ª—è–¥ –∞–Ω–∫–µ—Ç ---
@router.message(lambda m: m.text == "üìë –î–∏–≤–∏—Ç–∏—Å—è –∞–Ω–∫–µ—Ç–∏")
async def view_profiles(message: Message, state: FSMContext):
    next_profile_id = await send_next_profile(message, message.from_user.id)
    if next_profile_id:
        await state.update_data(current_profile_id=next_profile_id)


# --- –í–∑—è—Ç–∏ —Ñ–æ—Ç–æ –∑ –ø—Ä–æ—Ñ—ñ–ª—é Telegram ---
@router.message(lambda m: m.text == "–í–∑—è—Ç–∏ –∑ –º–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é —Ç–µ–ª–µ–≥—Ä–∞–º")
async def use_profile_photo(message: Message, state: FSMContext):
    profile_photos = await message.bot.get_user_profile_photos(message.from_user.id)
    if not profile_photos.total_count:
        await message.answer("–£ —Ç–µ–±–µ –Ω–µ–º–∞—î —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é.", reply_markup=profile_menu)
        return

    photo = profile_photos.photos[0][0]
    file = await message.bot.get_file(photo.file_id)
    user_dir = f"media/users/{message.from_user.id}"
    os.makedirs(user_dir, exist_ok=True)
    file_path = os.path.join(user_dir, "profile.jpg")
    await message.bot.download_file(file.file_path, file_path)

    await state.update_data(photos=[file_path])
    await message.answer("‚úÖ –§–æ—Ç–æ –∑ –ø—Ä–æ—Ñ—ñ–ª—é –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=profile_menu)
    await show_profile_preview(message, state)


# --- –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ ---
@router.message(lambda m: m.text == "‚úÖ –¶–µ –≤—Å–µ, –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–æ—Ç–æ")
async def save_photos(message: Message, state: FSMContext):
    data = await state.get_data()
    if not data.get("photos"):
        await message.answer("‚ùóÔ∏è –¢—Ä–µ–±–∞ –¥–æ–¥–∞—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–Ω–µ —Ñ–æ—Ç–æ.", reply_markup=profile_menu)
        return

    # ‚úÖ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —É –±–∞–∑—É
    save_user(message.from_user.id, data)

    await show_profile_preview(message, state)
    await state.clear()  # –º–æ–∂–Ω–∞ –æ—á–∏—Å—Ç–∏—Ç–∏ FSM, —è–∫—â–æ –∞–Ω–∫–µ—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ

    from handlers.keyboards import end_of_profiles_menu
    await message.answer(
        "‚úÖ –ê–Ω–∫–µ—Ç—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –¢–µ–ø–µ—Ä –º–æ–∂–Ω–∞ –¥–∏–≤–∏—Ç–∏—Å—è —ñ–Ω—à–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ üëá",
        reply_markup=end_of_profiles_menu
    )
# --- –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏ ---
@router.message(lambda m: m.text == "‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É")
async def edit_profile(message: Message, state: FSMContext):
    user_dir = f"media/users/{message.from_user.id}"
    if os.path.exists(user_dir):
        for f in os.listdir(user_dir):
            os.remove(os.path.join(user_dir, f))
    await state.update_data(photos=[])
    await message.answer("üì∏ –ù–∞–¥—ñ—à–ª–∏ –Ω–æ–≤—ñ —Ñ–æ—Ç–æ –∞–±–æ –≤—ñ–¥–µ–æ (–¥–æ 3), –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É ¬´–í–∑—è—Ç–∏ –∑ –º–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é —Ç–µ–ª–µ–≥—Ä–∞–º¬ª.", reply_markup=profile_menu)
    await state.set_state(Form.photos)

# --- –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏ ---
@router.message(lambda m: m.text == "‚úÖ –¢–∞–∫")
async def confirm_profile(message: Message, state: FSMContext):
    data = await state.get_data()
    save_user(message.from_user.id, data)
    await state.clear()
    from handlers.keyboards import end_of_profiles_menu
    await message.answer("üéâ –¢–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! –ú–æ–∂–µ—à –ø–æ—á–∏–Ω–∞—Ç–∏ –∑–Ω–∞–π–æ–º—Å—Ç–≤–∞.", reply_markup=end_of_profiles_menu)

