import os
from aiogram import Router
from aiogram.types import Message, FSInputFile
from database.models import get_next_profile, preload_profiles
from handlers.keyboards import end_of_profiles_menu 
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton


router = Router()

async def show_profile_preview(message: Message, state: FSMContext):
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ FSM
    data = await state.get_data()
    name = data.get("name", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
    age = data.get("age", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
    gender = data.get("gender", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
    preference = data.get("preference", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
    city = data.get("city", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
    bio = data.get("bio", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
    photos = data.get("photos", [])

    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç–∏
    text = (
        f"üìã –ü–µ—Ä–µ–≤—ñ—Ä —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É:\n\n"
        f"üë§ –Ü–º'—è: {name}\n"
        f"üéÇ –í—ñ–∫: {age}\n"
        f"‚öß –°—Ç–∞—Ç—å: {gender}\n"
        f"üíñ –•—Ç–æ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è: {preference}\n"
        f"üìç –ú—ñ—Å—Ç–æ: {city}\n"
        f"üìù Bio: {bio}\n"
        f"üì∏ –§–æ—Ç–æ: {len(photos)} —à—Ç."
    )

    await message.answer(text)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—Å—ñ —Ñ–æ—Ç–æ
    for photo_path in photos:
        if os.path.exists(photo_path):
            file = FSInputFile(photo_path)
            await message.answer_photo(file)
        else:
            await message.answer(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ñ–∞–π–ª: {photo_path}")

    # –ö–Ω–æ–ø–∫–∞ "–¶–µ –≤—Å–µ, –∑–±–µ—Ä–µ–≥—Ç–∏"
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚úÖ –¶–µ –≤—Å–µ, –∑–±–µ—Ä–µ–≥—Ç–∏")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("–Ø–∫—â–æ –≤—Å–µ –≤—ñ—Ä–Ω–æ, –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:", reply_markup=kb)


async def send_next_profile(message: Message, user_id: int) -> int | None:
    from database.models import _browse_cache, _browse_index

    if not _browse_cache.get(user_id) or _browse_index.get(user_id, 0) >= len(_browse_cache.get(user_id, [])):
        profiles = preload_profiles(user_id)
        if not profiles:
            _browse_cache[user_id] = [] 
            _browse_index[user_id] = 0
            await message.answer("üòï –ê–Ω–∫–µ—Ç–∏ –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—è.", reply_markup=end_of_profiles_menu)
            return None

    profile = get_next_profile(user_id)
    if not profile:
        _browse_cache[user_id] = []
        _browse_index[user_id] = 0
        await message.answer("üòï –ê–Ω–∫–µ—Ç–∏ –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—è.", reply_markup=end_of_profiles_menu)
        return None

    caption = f"*{profile['name']}*, {profile['age']}, {profile['city']}\n{profile.get('bio', '')}"

    photos = profile.get("photos", [])
    if photos and os.path.exists(photos[0]):
        photo_input = FSInputFile(photos[0])
        await message.answer_photo(
            photo=photo_input,
            caption=caption,
            parse_mode="Markdown",
            reply_markup=end_of_profiles_menu  # –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑–Ω–∏–∑—É
        )
    else:
        await message.answer(
            caption,
            parse_mode="Markdown",
            reply_markup=end_of_profiles_menu  # –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑–Ω–∏–∑—É
        )

    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ ID –ø–æ–∫–∞–∑–∞–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é, —â–æ–± –∑–±–µ—Ä–µ–≥—Ç–∏ –≤ FSM
    return profile["user_id"]
