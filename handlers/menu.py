from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from states import Form
from .profile import send_next_profile
from database.models import record_like, check_mutual_like

router = Router()

# –†–µ–ø–ª–∞–π –º–µ–Ω—é
end_of_profiles_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìë –î–∏–≤–∏—Ç–∏—Å—è –∞–Ω–∫–µ—Ç–∏")],
        [KeyboardButton(text="‚úèÔ∏è –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –Ω–∞–Ω–æ–≤–æ")],
        [KeyboardButton(text="üëÄ –•—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤")],
        [KeyboardButton(text="‚ù§Ô∏è –õ–∞–π–∫"), KeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏")]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)


# /start
@router.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("–í–∏–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=end_of_profiles_menu)


# –î–∏–≤–∏—Ç–∏—Å—è –∞–Ω–∫–µ—Ç–∏
@router.message(lambda m: m.text == "üìë –î–∏–≤–∏—Ç–∏—Å—è –∞–Ω–∫–µ—Ç–∏")
async def view_profiles(message: types.Message, state: FSMContext):
    next_profile_id = await send_next_profile(message, message.from_user.id)
    if next_profile_id:
        await state.update_data(current_profile_id=next_profile_id)


# –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –Ω–∞–Ω–æ–≤–æ
@router.message(lambda m: m.text == "‚úèÔ∏è –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –Ω–∞–Ω–æ–≤–æ")
async def fill_again(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(Form.age)
    await message.answer("–î–∞–≤–∞–π –∑–∞–ø–æ–≤–Ω–∏–º–æ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ üôÇ\n–°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?")


# –•—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤
@router.message(lambda m: m.text == "üëÄ –•—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤")
async def who_liked(message: types.Message):
    from database.models import get_connection
    import json, os
    user_id = message.from_user.id
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute('''
        SELECT users.user_id, users.name, users.photos FROM likes
        JOIN users ON likes.liker_id = users.user_id
        WHERE likes.liked_id = ?
    ''', (user_id,))
    rows = cursor.fetchall()
    conn.close()

    if not rows:
        await message.answer("–ù—ñ—Ö—Ç–æ —â–µ —Ç–µ–±–µ –Ω–µ –ª–∞–π–∫–Ω—É–≤ üò¢")
        return

    for row in rows:
        liker_id, name, photos_json = row
        photos = []
        if photos_json:
            try:
                photos = json.loads(photos_json)
            except:
                photos = []
        caption = f"‚ù§Ô∏è {name}"
        if photos and os.path.exists(photos[0]):
            from aiogram.types import FSInputFile
            photo_input = FSInputFile(photos[0])
            await message.answer_photo(photo=photo_input, caption=caption)
        else:
            await message.answer(caption)


# –õ–∞–π–∫ –ø—Ä–æ—Ñ—ñ–ª—é
@router.message(lambda m: m.text == "‚ù§Ô∏è –õ–∞–π–∫")
async def like_profile(message: types.Message, state: FSMContext):
    data = await state.get_data()
    liked_user_id = data.get("current_profile_id")
    liker_id = message.from_user.id

    if not liked_user_id:
        await message.answer("–°–ø–æ—á–∞—Ç–∫—É –≤—ñ–¥–∫—Ä–∏–π –∞–Ω–∫–µ—Ç—É üòâ")
        return

    record_like(liker_id, liked_user_id)

    if check_mutual_like(liker_id, liked_user_id):
        await message.answer(f"üéâ –£—Ä–∞! –£ —Ç–µ–±–µ –≤–∑–∞—î–º–Ω–∏–π –ª–∞–π–∫ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {liked_user_id}!")
    else:
        await message.answer("–õ–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ ‚úÖ")

    # –ù–∞—Å—Ç—É–ø–Ω–∞ –∞–Ω–∫–µ—Ç–∞
    next_profile_id = await send_next_profile(message, liker_id)
    if next_profile_id:
        await state.update_data(current_profile_id=next_profile_id)


# –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å
@router.message(lambda m: m.text == "‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏")
async def skip_profile(message: types.Message, state: FSMContext):
    next_profile_id = await send_next_profile(message, message.from_user.id)
    if next_profile_id:
        await state.update_data(current_profile_id=next_profile_id)
