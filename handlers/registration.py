# handlers/registration.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from states import Form
from utils.location import validate_city

router = Router()

@router.callback_query(F.data == "agree")
async def ask_age(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤? (–≤—ñ–¥ 14 –¥–æ 60)")
    await state.set_state(Form.age)

@router.message(Form.age)
async def handle_age(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —á–∏—Å–ª–æ.")
        return
    age = int(message.text)
    if not 14 <= age <= 60:
        await message.answer("üòï –í—ñ–∫ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 14 –¥–æ 60 —Ä–æ–∫—ñ–≤.")
        return
    await state.update_data(age=age)
    builder = InlineKeyboardBuilder()
    builder.button(text="üëß –Ø –¥—ñ–≤—á–∏–Ω–∞", callback_data="gender_girl")
    builder.button(text="üë¶ –Ø —Ö–ª–æ–ø–µ—Ü—å", callback_data="gender_boy")
    builder.adjust(1)
    await message.answer("–•—Ç–æ —Ç–∏?", reply_markup=builder.as_markup())
    await state.set_state(Form.gender)

@router.callback_query(Form.gender)
async def handle_gender(callback: CallbackQuery, state: FSMContext):
    gender = callback.data.split('_')[1]
    await state.update_data(gender=gender)
    builder = InlineKeyboardBuilder()
    builder.button(text="üëß –î—ñ–≤—á–∞—Ç–∞", callback_data="like_girls")
    builder.button(text="üë¶ –•–ª–æ–ø—Ü—ñ", callback_data="like_boys")
    builder.button(text="ü§ù –í—Å–µ –æ–¥–Ω–æ", callback_data="like_all")
    builder.adjust(1)
    await callback.message.edit_text("–•—Ç–æ —Ç–æ–±—ñ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è?", reply_markup=builder.as_markup())
    await state.set_state(Form.preference)

@router.callback_query(Form.preference)
async def handle_preference(callback: CallbackQuery, state: FSMContext):
    preference = callback.data.split('_')[1]
    await state.update_data(preference=preference)
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üìç –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –º–æ—î –º—ñ—Å—Ü–µ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è", request_location=True)]],
        resize_keyboard=True, one_time_keyboard=True)
    await callback.message.answer("–ó —è–∫–æ–≥–æ —Ç–∏ –º—ñ—Å—Ç–∞? –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –∞–±–æ –≤–≤–µ–¥–∏ –≤—Ä—É—á–Ω—É:", reply_markup=kb)
    await state.set_state(Form.location)

@router.message(Form.location)
async def handle_location(message: Message, state: FSMContext):
    if message.location:
        lat, lon = message.location.latitude, message.location.longitude
        await state.update_data(city=f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: {lat:.4f}, {lon:.4f}")
    else:
        city_raw = message.text.strip()
        if not city_raw or len(city_raw) < 2:
            await message.answer("‚ùóÔ∏è –í–≤–µ–¥–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞.")
            return
        city = await validate_city(city_raw)
        if city is None:
            await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ç–∞–∫–µ –º—ñ—Å—Ç–æ –∞–±–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
            return
        await state.update_data(city=city)

    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üìû –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –º—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)]],
        resize_keyboard=True, one_time_keyboard=True)
    await message.answer(
        "–ú–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–µ–Ω —Ç–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏. –Ü–Ω—à—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –π–æ–≥–æ –Ω–µ –ø–æ–±–∞—á–∞—Ç—å.",
        reply_markup=kb
    )
    await state.set_state(Form.phone)

@router.message(Form.phone)
async def handle_phone(message: Message, state: FSMContext):
    if not message.contact:
        await message.answer("üìû –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É.")
        return
    await state.update_data(phone=message.contact.phone_number)
    data = await state.get_data()
    name = data.get("name") or message.from_user.first_name

    builder = InlineKeyboardBuilder()
    builder.button(text=f"üôã –ó–≤–∞—Ç–∏ {name}", callback_data="name_profile")
    builder.adjust(1)

    await message.answer("–Ø–∫ –¥–æ —Ç–µ–±–µ –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è?", reply_markup=builder.as_markup())
    await message.answer("‚¨ÜÔ∏è –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –∞–±–æ –≤–≤–µ–¥–∏ —ñ–º‚Äô—è –≤—Ä—É—á–Ω—É.", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Form.name)

@router.callback_query(F.data == "name_profile")
async def use_profile_name(callback: CallbackQuery, state: FSMContext):
    await state.update_data(name=callback.from_user.first_name)
    await ask_bio(callback.message, state)

@router.message(Form.name)
async def handle_custom_name(message: Message, state: FSMContext):
    name = message.text.strip()
    if len(name) < 2:
        await message.answer("–í–≤–µ–¥–∏ –ø–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–µ —ñ–º‚Äô—è.")
        return
    await state.update_data(name=name)
    await ask_bio(message, state)

async def ask_bio(message: Message, state: FSMContext):
    skip_button = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer(
        "üìù –†–æ–∑–∫–∞–∂–∏ –ø—Ä–æ —Å–µ–±–µ, –∫–æ–≥–æ —Ö–æ—á–µ—à –∑–Ω–∞–π—Ç–∏, —á–∏–º –ø—Ä–æ–ø–æ–Ω—É—î—à –∑–∞–π–Ω—è—Ç–∏—Å—å.",
        reply_markup=skip_button
    )
    await state.set_state(Form.bio)

@router.message(Form.bio)
async def handle_bio(message: Message, state: FSMContext):
    bio = message.text.strip()
    if bio.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":
        await state.update_data(bio=bio)
    else:
        await state.update_data(bio="")
    await message.answer(
        "üì∏ –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –∞–±–æ –∑–∞–ø–∏—à–∏ –≤—ñ–¥–µ–æ üëç (–¥–æ 15 —Å–µ–∫)",
        reply_markup=InlineKeyboardBuilder()
        .button(text="–í–∑—è—Ç–∏ –∑ –º–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é —Ç–µ–ª–µ–≥—Ä–∞–º", callback_data="use_profile_photo")
        .as_markup()
    )
    await state.update_data(photos=[])
    await state.set_state(Form.photos)
