from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from states import Form
from .profile import send_next_profile
from database.models import record_like, check_mutual_like
from handlers.keyboards import end_of_profiles_menu
from database.models import get_connection
from aiogram.types import FSInputFile, InputMediaPhoto
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

router = Router()

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –ª–∞–π–∫—ñ–≤
def who_liked_menu():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –ª–∞–π–∫–∏", callback_data="clear_likes")]
        ]
    )

# /start
@router.message(Command("start"))
async def start_command(message: types.Message):
    # –î—ñ–∑–Ω–∞—î–º–æ—Å—è —Å—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT is_hidden FROM users WHERE user_id = ?", (message.from_user.id,))
    row = cursor.fetchone()
    is_hidden = row[0] if row else 0
    conn.close()

    await message.answer("–í–∏–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=hide_show_menu(is_hidden))

# –î–∏–≤–∏—Ç–∏—Å—è –∞–Ω–∫–µ—Ç–∏
@router.message(lambda m: m.text == "üìë –î–∏–≤–∏—Ç–∏—Å—è –∞–Ω–∫–µ—Ç–∏")
async def view_profiles(message: types.Message, state: FSMContext):
    next_profile_id = await send_next_profile(message, message.from_user.id)
    if next_profile_id:
        await state.update_data(current_profile_id=next_profile_id)

# –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –Ω–∞–Ω–æ–≤–æ
@router.message(lambda m: m.text == "‚úèÔ∏è –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –Ω–∞–Ω–æ–≤–æ")
async def fill_again(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(Form.age)
    await message.answer("–î–∞–≤–∞–π –∑–∞–ø–æ–≤–Ω–∏–º–æ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ üôÇ\n–°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?")

from aiogram import types
from aiogram.types import FSInputFile
import json, os
from database.models import get_connection

# üëÄ –•—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤
@router.message(lambda m: m.text == "üëÄ –•—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤")
async def who_liked(message: types.Message):
    user_id = message.from_user.id
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute('''
        SELECT users.user_id, users.name, users.photos FROM likes
        JOIN users ON likes.liker_id = users.user_id
        WHERE likes.liked_id = ?
    ''', (user_id,))
    rows = cursor.fetchall()
    conn.close()

    if not rows:
        await message.answer("–ù—ñ—Ö—Ç–æ —â–µ —Ç–µ–±–µ –Ω–µ –ª–∞–π–∫–Ω—É–≤ üò¢")
        return

    for row in rows:
        liker_id, name, photos_json = row
        photos = []
        if photos_json:
            try:
                photos = json.loads(photos_json)
            except:
                photos = []

        media = []
        for photo_path in photos:
            if os.path.exists(photo_path):
                media.append(InputMediaPhoto(media=FSInputFile(photo_path)))
        if media:
            await message.answer_media_group(media=media)
    
        await message.answer(
            f"‚ù§Ô∏è {name}\n üëâüëâ tg://user?id={liker_id} \n ‚ö†Ô∏è –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ–±–º–µ–∂–∏–≤ –ø—Ä–∏–≤–∞—Ç–Ω—ñ—Å—Ç—å, —Ç–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –º–æ–∂–µ –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏"
        )

    # –¥–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –æ—á–∏—â–µ–Ω–Ω—è
    await message.answer("–©–æ –∑—Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ?", reply_markup=who_liked_menu())


# –õ–∞–π–∫ –ø—Ä–æ—Ñ—ñ–ª—é
@router.message(lambda m: m.text == "‚ù§Ô∏è –õ–∞–π–∫")
async def like_profile(message: types.Message, state: FSMContext):
    data = await state.get_data()
    liked_user_id = data.get("current_profile_id")
    liker_id = message.from_user.id

    if not liked_user_id:
        await message.answer("–°–ø–æ—á–∞—Ç–∫—É –≤—ñ–¥–∫—Ä–∏–π –∞–Ω–∫–µ—Ç—É üòâ")
        return

    record_like(liker_id, liked_user_id)

    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ë–î
    from database.models import get_user
    liked_user = get_user(liked_user_id)

    if liked_user:
        username = liked_user.get("username")
        name = liked_user.get("name", "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á")

        if username:
            # üëá –±—É–¥–µ —Ñ–æ—Ä–º–∞—Ç: –Ü–º'—è (@username) –∑ –∫–ª—ñ–∫–∞–±–µ–ª—å–Ω–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º
            link = f"[{name} (@{username})](https://t.me/{username})"
        else:
            # fallback –Ω–∞ —ñ–º'—è + id
            link = f"{name} [tg://user?id={liked_user_id}]"
    else:
        link = f"[–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º](tg://user?id={liked_user_id})"

    if check_mutual_like(liker_id, liked_user_id):
        await message.answer(
            f"üéâ –£—Ä–∞! –£ —Ç–µ–±–µ –≤–∑–∞—î–º–Ω–∏–π –ª–∞–π–∫ –∑ {link}!",
            parse_mode="Markdown"
        )
    else:
        await message.answer("–õ–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ ‚úÖ")

    # –ü–æ–∫–∞–∑—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω—É –∞–Ω–∫–µ—Ç—É
    next_profile_id = await send_next_profile(message, liker_id)
    if next_profile_id:
        await state.update_data(current_profile_id=next_profile_id)
    else:
        await message.answer("–ê–Ω–∫–µ—Ç –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î üò¢", reply_markup=end_of_profiles_menu)

# –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å
@router.message(lambda m: m.text == "‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏")
async def skip_profile(message: types.Message, state: FSMContext):
    next_profile_id = await send_next_profile(message, message.from_user.id)
    if next_profile_id:
        await state.update_data(current_profile_id=next_profile_id)

# üóë –û—á–∏—Å—Ç–∫–∞ –ª–∞–π–∫—ñ–≤
@router.callback_query(lambda c: c.data == "clear_likes")
async def clear_likes(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    conn = get_connection()
    cursor = conn.cursor()

    # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Å–∏, –¥–µ —é–∑–µ—Ä –ª–∞–π–∫–Ω—É–≤ –∞–±–æ –π–æ–≥–æ –ª–∞–π–∫–Ω—É–ª–∏
    cursor.execute('DELETE FROM likes WHERE liker_id = ? OR liked_id = ?', (user_id, user_id))
    conn.commit()
    conn.close()

    await callback.message.answer("‚úÖ –£—Å—ñ –ª–∞–π–∫–∏ –æ—á–∏—â–µ–Ω—ñ.")
    await callback.answer()

# –î–∏–Ω–∞–º—ñ—á–Ω–µ –º–µ–Ω—é –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è/–ø–æ–∫–∞–∑—É –∞–Ω–∫–µ—Ç–∏
def hide_show_menu(is_hidden: bool):
    text = "üëÅ –ü–æ–∫–∞–∑–∞—Ç–∏ –º–æ—é –∞–Ω–∫–µ—Ç—É" if is_hidden else "üôà –°–∫—Ä–∏—Ç–∏ –º–æ—é –∞–Ω–∫–µ—Ç—É"
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=text)],
            [KeyboardButton(text="üìë –î–∏–≤–∏—Ç–∏—Å—è –∞–Ω–∫–µ—Ç–∏")],
            [KeyboardButton(text="‚úèÔ∏è –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –Ω–∞–Ω–æ–≤–æ")],
            [KeyboardButton(text="üëÄ –•—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤")],
            [KeyboardButton(text="üåê –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É")],
            [KeyboardButton(text="üÜò –ü—ñ–¥—Ç—Ä–∏–º–∫–∞")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

@router.message(lambda m: m.text in ["üôà –°–∫—Ä–∏—Ç–∏ –º–æ—é –∞–Ω–∫–µ—Ç—É", "üëÅ –ü–æ–∫–∞–∑–∞—Ç–∏ –º–æ—é –∞–Ω–∫–µ—Ç—É"])
async def toggle_profile_visibility(message: types.Message):
    user_id = message.from_user.id
    conn = get_connection()
    cursor = conn.cursor()

    # –î—ñ–∑–Ω–∞—î–º–æ—Å—è –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å
    cursor.execute("SELECT is_hidden FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    if row:
        is_hidden = row[0]
        new_status = 0 if is_hidden else 1
        cursor.execute("UPDATE users SET is_hidden = ? WHERE user_id = ?", (new_status, user_id))
        conn.commit()

        text = "‚úÖ –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ —Ç–µ–ø–µ—Ä –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è." if new_status == 0 else "‚úÖ –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∞."
        await message.answer(text, reply_markup=hide_show_menu(new_status))
    
    conn.close()

@router.message(lambda m: m.text == "üåê –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É")
async def change_language(message: types.Message):
    await message.answer("üåç –û–±–µ—Ä–∏ –º–æ–≤—É:", reply_markup=language_menu())
