from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from states import Form
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from utils.location import validate_city  
from handlers.profile import show_profile_preview
from database.models import save_user
from handlers.profile import send_next_profile
from utils.location import coords_to_city

import os

router = Router()

photo_registration_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üì∑ –í–∑—è—Ç–∏ –∑ –º–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é", callback_data="use_profile_photo")]
    ]
)

# --- –°—Ç–∞—Ä—Ç —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó ---
async def start_registration(message: Message, state: FSMContext):
    if not message.from_user.username:
        await message.answer(
            "‚ùå –£ —Ç–µ–±–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π @username —É Telegram.\n\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ–¥–∞–π –π–æ–≥–æ –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö Telegram —ñ —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑."
        )
        return
    
    await message.answer("–°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤? (–≤—ñ–¥ 14 –¥–æ 60)", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Form.age)

@router.message(lambda m: m.text == "‚úÖ –¶–µ –≤—Å–µ, –∑–±–µ—Ä–µ–≥—Ç–∏")
async def save_profile(message: Message, state: FSMContext):
    if not message.from_user.username:
        await message.answer(
            "‚ùå –£ —Ç–µ–±–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π @username —É Telegram.\n\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ–¥–∞–π –π–æ–≥–æ –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö Telegram —ñ –ø—Ä–æ–π–¥–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —â–µ —Ä–∞–∑."
        )
        return

    data = await state.get_data()
    data["username"] = message.from_user.username   
    save_user(message.from_user.id, data)           
    
    await state.clear()

    await message.answer(
        "‚úÖ –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∞!\n"
        "–¢–µ–ø–µ—Ä –º–æ–∂–µ—à –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –∞–Ω–∫–µ—Ç–∏ —ñ–Ω—à–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤."
    )
    next_profile_id = await send_next_profile(message, message.from_user.id)

    if next_profile_id:
        await state.update_data(current_profile_id=next_profile_id)



@router.message(Form.age)
async def handle_age(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —á–∏—Å–ª–æ.")
        return
    age = int(message.text)
    if not 14 <= age <= 60:
        await message.answer("üòï –í—ñ–∫ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 14 –¥–æ 60 —Ä–æ–∫—ñ–≤.")
        return
    await state.update_data(age=age)

    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üëß –Ø –¥—ñ–≤—á–∏–Ω–∞"), KeyboardButton(text="üë¶ –Ø —Ö–ª–æ–ø–µ—Ü—å")]
        ],
        resize_keyboard=True, one_time_keyboard=True
    )
    await message.answer("–•—Ç–æ —Ç–∏?", reply_markup=kb)
    await state.set_state(Form.gender)

@router.message(Form.gender)
async def handle_gender(message: Message, state: FSMContext):
    text = message.text
    if text not in ["üëß –Ø –¥—ñ–≤—á–∏–Ω–∞", "üë¶ –Ø —Ö–ª–æ–ø–µ—Ü—å"]:
        await message.answer("–í–∏–±–µ—Ä–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –æ–¥–Ω—É –∑ –∫–Ω–æ–ø–æ–∫.")
        return
    gender = "girl" if text == "üëß –Ø –¥—ñ–≤—á–∏–Ω–∞" else "boy"
    await state.update_data(gender=gender)

    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üëß –î—ñ–≤—á–∞—Ç–∞")],
            [KeyboardButton(text="üë¶ –•–ª–æ–ø—Ü—ñ")],
            [KeyboardButton(text="ü§ù –í—Å–µ –æ–¥–Ω–æ")]
        ],
        resize_keyboard=True, one_time_keyboard=True
    )
    await message.answer("–•—Ç–æ —Ç–æ–±—ñ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è?", reply_markup=kb)
    await state.set_state(Form.preference)

@router.message(Form.preference)
async def handle_preference(message: Message, state: FSMContext):
    text = message.text
    if text not in ["üëß –î—ñ–≤—á–∞—Ç–∞", "üë¶ –•–ª–æ–ø—Ü—ñ", "ü§ù –í—Å–µ –æ–¥–Ω–æ"]:
        await message.answer("–í–∏–±–µ—Ä–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –æ–¥–Ω—É –∑ –∫–Ω–æ–ø–æ–∫.")
        return
    preference = text.split()[0].lower() if text != "ü§ù –í—Å–µ –æ–¥–Ω–æ" else "all"
    await state.update_data(preference=preference)

    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üìç –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –º–æ—î –º—ñ—Å—Ü–µ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è", request_location=True)]],
        resize_keyboard=True, one_time_keyboard=True
    )
    await message.answer("–ó —è–∫–æ–≥–æ —Ç–∏ –º—ñ—Å—Ç–∞? –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –∞–±–æ –≤–≤–µ–¥–∏ –≤—Ä—É—á–Ω—É:", reply_markup=kb)
    await state.set_state(Form.location)

@router.message(Form.location)
async def handle_location(message: Message, state: FSMContext):
    if message.location:
        lat, lon = message.location.latitude, message.location.longitude
        city = coords_to_city(lat, lon)
        if not city:
            await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –º—ñ—Å—Ç–æ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –∞–±–æ –≤–≤–µ–¥–∏ –≤—Ä—É—á–Ω—É.")
            return
        await state.update_data(city=city)
    else:
        city_raw = message.text.strip()
        if not city_raw or len(city_raw) < 2:
            await message.answer("‚ùóÔ∏è –í–≤–µ–¥–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞.")
            return
        city = await validate_city(city_raw)
        if city is None:
            await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ç–∞–∫–µ –º—ñ—Å—Ç–æ –∞–±–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
            return
        await state.update_data(city=city)

    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üìû –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –º—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)]],
        resize_keyboard=True, one_time_keyboard=True
    )
    await message.answer(
        f"üìç –¢–≤–æ—î –º—ñ—Å—Ç–æ –≤–∏–∑–Ω–∞—á–µ–Ω–æ —è–∫: *{city}*\n\n"
        "–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏.",
        parse_mode="Markdown",
        reply_markup=kb
    )
    await state.set_state(Form.phone)


@router.message(Form.phone)
async def handle_phone(message: Message, state: FSMContext):
    if not message.contact:
        await message.answer("üìû –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É.")
        return
    await state.update_data(phone=message.contact.phone_number)

    await message.answer("–Ø–∫ –¥–æ —Ç–µ–±–µ –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è? –í–≤–µ–¥–∏ —ñ–º'—è:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Form.name)

# --- –æ–±—Ä–æ–±–∫–∞ —ñ–º–µ–Ω—ñ ---
@router.message(Form.name)
async def handle_custom_name(message: Message, state: FSMContext):
    name = message.text.strip()
    if len(name) < 2:
        await message.answer("–í–≤–µ–¥–∏ –ø–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–µ —ñ–º‚Äô—è –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ –∑ –ø—Ä–æ—Ñ—ñ–ª—é.")
        return
    await state.update_data(name=name)

    # –ø—ñ—Å–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –±—ñ–æ
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏")]],
        resize_keyboard=True, one_time_keyboard=True
    )
    await message.answer("üìù –†–æ–∑–∫–∞–∂–∏ –ø—Ä–æ —Å–µ–±–µ, –∫–æ–≥–æ —Ö–æ—á–µ—à –∑–Ω–∞–π—Ç–∏, —á–∏–º –ø—Ä–æ–ø–æ–Ω—É—î—à –∑–∞–π–Ω—è—Ç–∏—Å—å.", reply_markup=kb)
    await state.set_state(Form.bio)

@router.callback_query(F.data == "use_profile_name")
async def use_name_from_profile(callback: CallbackQuery, state: FSMContext):
    await state.update_data(name=callback.from_user.first_name)
    await ask_bio(callback.message, state)

async def ask_bio(message: Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏")]],
        resize_keyboard=True, one_time_keyboard=True
    )
    await message.answer("üìù –†–æ–∑–∫–∞–∂–∏ –ø—Ä–æ —Å–µ–±–µ, –∫–æ–≥–æ —Ö–æ—á–µ—à –∑–Ω–∞–π—Ç–∏, —á–∏–º –ø—Ä–æ–ø–æ–Ω—É—î—à –∑–∞–π–Ω—è—Ç–∏—Å—å.", reply_markup=kb)
    await state.set_state(Form.bio)


# --- –æ–±—Ä–æ–±–∫–∞ –±—ñ–æ ---
# --- –ø—ñ—Å–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –±—ñ–æ ---
@router.message(Form.bio)
async def handle_bio(message: Message, state: FSMContext):
    bio = message.text.strip()
    if bio.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":
        await state.update_data(bio=bio)
    else:
        await state.update_data(bio="")

    builder = InlineKeyboardBuilder()
    builder.button(text="üì∏ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ", callback_data="send_media")
    builder.button(text="üì∑ –í–∑—è—Ç–∏ –∑ –º–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é Telegram", callback_data="use_profile_photo")
    builder.adjust(1)

    await message.answer(
        "–¢–µ–ø–µ—Ä –¥–æ–¥–∞–π —Å–≤–æ—î —Ñ–æ—Ç–æ –∞–±–æ –≤—ñ–¥–µ–æ (–¥–æ 15 —Å–µ–∫), –∞–±–æ –±–µ—Ä–∏ –∑ –ø—Ä–æ—Ñ—ñ–ª—é Telegram.",
        reply_markup=photo_registration_kb
    )
    await state.update_data(photos=[])
    await state.set_state(Form.photos)

@router.callback_query(F.data == "send_media")
async def handle_send_media(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –∞–±–æ –≤—ñ–¥–µ–æ (–¥–æ 15 —Å–µ–∫). –ê–±–æ –≤—Å—Ç–∞–Ω–æ–≤–∏ –∑ –ø—Ä–æ—Ñ—ñ–ª—é (–Ω–∏–∂—á–∞ —è–∫—ñ—Å—Ç—å)")
    await state.set_state(Form.photos)

@router.callback_query(F.data == "use_profile_photo")
async def handle_use_profile_photo(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    profile_photos = await callback.bot.get_user_profile_photos(user_id)

    if not profile_photos.total_count:
        await callback.message.answer("‚ùå –£ —Ç–µ–±–µ –Ω–µ–º–∞—î —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é.")
        return

    photo = profile_photos.photos[0][-1]
    file = await callback.bot.get_file(photo.file_id)

    user_dir = f"media/users/{user_id}"
    os.makedirs(user_dir, exist_ok=True)
    file_path = os.path.join(user_dir, "profile_photo.jpg")

    await callback.bot.download_file(file.file_path, file_path)

    await state.update_data(photos=[file_path])

    await callback.message.answer("‚úÖ –§–æ—Ç–æ –∑ –ø—Ä–æ—Ñ—ñ–ª—é –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

    # –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –∞–Ω–∫–µ—Ç–∏
    await show_profile_preview(callback.message, state)

    # –ø—ñ—Å–ª—è —Ü—å–æ–≥–æ —Å—Ç–∞–≤–∏–º–æ —Å—Ç–∞–Ω –Ω–∞ preview
    await state.set_state(Form.preview)

@router.callback_query(Form.preview)
async def handle_profile_preview_actions(callback: CallbackQuery, state: FSMContext):
    if callback.data == "confirm_profile":
        await callback.message.answer("üéâ –ê–Ω–∫–µ—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞!")
        # –º–æ–∂–µ—à –∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞–Ω –Ω–∞ –∫—ñ–Ω—Ü–µ–≤–∏–π –∞–±–æ clear()
        await state.clear()
    elif callback.data == "edit_profile":
        await callback.message.answer("‚úèÔ∏è –î–∞–≤–∞–π —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∞–Ω–∫–µ—Ç—É.")
        await state.set_state(Form.age)  # –∞–±–æ –∫—É–¥–∏ —Ö–æ—á–µ—à –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏

async def use_profile_photo(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    profile_photos = await callback.bot.get_user_profile_photos(user_id)
    
    if not profile_photos.total_count:
        await callback.message.answer("‚ùå –£ —Ç–µ–±–µ –Ω–µ–º–∞—î —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é.")
        return

    photo = profile_photos.photos[0][0]
    file = await callback.bot.get_file(photo.file_id)

    user_dir = f"media/users/{user_id}"
    os.makedirs(user_dir, exist_ok=True)
    file_path = os.path.join(user_dir, "profile_photo.jpg")

    await callback.bot.download(file, destination=file_path)

    await state.update_data(photos=[file_path])

    await callback.message.answer("‚úÖ –§–æ—Ç–æ –∑ –ø—Ä–æ—Ñ—ñ–ª—é –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
    
    from handlers.profile import show_profile_preview 
    await show_profile_preview(callback.message, state)